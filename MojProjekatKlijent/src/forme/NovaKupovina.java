/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Kupac;
import domen.Kupovina;
import domen.OpstiDomenskiObjekat;
import domen.StavkaKupovine;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import komunikacija.KomunikacijaSaServerom;
import konstante.Operacije;
import model.ModelTabeleStavkaKupovine;
import transfer.KlijentskiZahtev;
import transfer.ServerskiOdgovor;

/**
 *
 * @author gaga__m
 */
public class NovaKupovina extends javax.swing.JFrame {

    private Kupovina kupovina;

    public void postaviTxtUkupno() {
        double ukupno = 0;
        ModelTabeleStavkaKupovine mtsk = (ModelTabeleStavkaKupovine) tabelaStavke.getModel();
        List<StavkaKupovine> listaS = mtsk.getListaStavki();
        for (StavkaKupovine sk1 : listaS) {
            ukupno += sk1.getVrednostStavke();
        }
        txtUkupno.setText(ukupno + "");
    }

    /**
     * Creates new form NovaKupovina
     */
    public NovaKupovina() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(255, 204, 102));
        popuniCBKupac();
        srediTabelu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbKupac = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        txtDatum = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaNapomemena = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaStavke = new javax.swing.JTable();
        btnDodajStavku = new javax.swing.JButton();
        btnObrisiStavku = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtUkupno = new javax.swing.JTextField();
        btnSacuvajKupovinu = new javax.swing.JButton();
        btnObradi = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        btnIzmeniStavku = new javax.swing.JButton();
        btnZatvori = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Unos kupovine");

        jLabel1.setText("Kupac:");

        cmbKupac.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Datum(dd.MM.yyyy):");

        jLabel3.setText("Napomena:");

        txtAreaNapomemena.setColumns(20);
        txtAreaNapomemena.setRows(5);
        jScrollPane1.setViewportView(txtAreaNapomemena);

        tabelaStavke.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabelaStavke);

        btnDodajStavku.setText("Dodaj stavku");
        btnDodajStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajStavkuActionPerformed(evt);
            }
        });

        btnObrisiStavku.setText("Obrisi stavku");
        btnObrisiStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiStavkuActionPerformed(evt);
            }
        });

        jLabel4.setText("Ukupno:");

        btnSacuvajKupovinu.setText("Sacuvaj kupovinu");
        btnSacuvajKupovinu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajKupovinuActionPerformed(evt);
            }
        });

        btnObradi.setText("Obradi");
        btnObradi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObradiActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnIzmeniStavku.setText("Izmeni stavku");
        btnIzmeniStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniStavkuActionPerformed(evt);
            }
        });

        btnZatvori.setText("Zatvori");
        btnZatvori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZatvoriActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbKupac, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtDatum)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btnDodajStavku)
                        .addGap(15, 15, 15)
                        .addComponent(btnIzmeniStavku)
                        .addGap(48, 48, 48)
                        .addComponent(btnObrisiStavku))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSacuvajKupovinu)
                                .addGap(18, 18, 18)
                                .addComponent(btnIzmeni, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnObradi, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnZatvori, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtUkupno, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbKupac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDodajStavku)
                    .addComponent(btnObrisiStavku)
                    .addComponent(btnIzmeniStavku))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtUkupno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSacuvajKupovinu)
                    .addComponent(btnObradi)
                    .addComponent(btnIzmeni)
                    .addComponent(btnZatvori))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDodajStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajStavkuActionPerformed
        UnosStavkeKupovine usk = new UnosStavkeKupovine(this, true);
        usk.pack();
        usk.setVisible(true);

    }//GEN-LAST:event_btnDodajStavkuActionPerformed

    private void btnObrisiStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiStavkuActionPerformed
        int red = tabelaStavke.getSelectedRow();
        if (red != -1) {
            ModelTabeleStavkaKupovine mtsk = (ModelTabeleStavkaKupovine) tabelaStavke.getModel();
            StavkaKupovine sk = mtsk.dajMiIzabranuStavku(red);
            mtsk.obrisiStavku(red);
            double ukupno = Double.parseDouble(txtUkupno.getText());
            ukupno -= sk.getVrednostStavke();
            txtUkupno.setText(ukupno + "");
        } else {
            JOptionPane.showMessageDialog(this, "Niste odabrali stavku iz tabele.");
        }
    }//GEN-LAST:event_btnObrisiStavkuActionPerformed

    private void btnSacuvajKupovinuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajKupovinuActionPerformed
        Kupac kupac = (Kupac) cmbKupac.getSelectedItem();
        String dat = txtDatum.getText();
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        Date datum = null;
        try {
            datum = sdf.parse(dat);
        } catch (ParseException ex) {
            Logger.getLogger(NovaKupovina.class.getName()).log(Level.SEVERE, null, ex);
        }
        String napomena = txtAreaNapomemena.getText();
        ModelTabeleStavkaKupovine mtsk = (ModelTabeleStavkaKupovine) tabelaStavke.getModel();
        List<StavkaKupovine> listaSK = mtsk.getListaStavki();

        if (kupac.getImePrezime().isEmpty() || dat.isEmpty() || napomena.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Unesite sve podatke");
            return;
        }
        if (listaSK.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate uneti barem jednu stavku!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (int i = 0; i < listaSK.size(); i++) {
            for (int j = i + 1; j < listaSK.size(); j++) {
                if (listaSK.get(i).getKnjiga().getKnjigaID() == listaSK.get(j).getKnjiga().getKnjigaID()) {
                    JOptionPane.showMessageDialog(this, "Ne mogu postojati 2 stavke koje se odnose na istu knjigu!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }

        for (int i = 0; i < listaSK.size(); i++) {

            if (listaSK.get(i).getKolicina() <= 0) {
                JOptionPane.showMessageDialog(this, "Kolicina mora biti broj veći od nule!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                return;

            }
            if (listaSK.get(i).getKolicina() > listaSK.get(i).getKnjiga().getStanjeNaZalihama()) {
                JOptionPane.showMessageDialog(this, "Uneta kolicina je veca od kolicine koju imamo na zalihama: " + listaSK.get(i).getKnjiga().getStanjeNaZalihama(), "GREŠKA", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        double ukupno = 0;
        for (StavkaKupovine stavka : listaSK) {
            ukupno += stavka.getVrednostStavke();
        }

        //txtUkupno.setText(String.valueOf(ukupno));
        Kupovina kupo = new Kupovina(-1, datum, napomena, ukupno, kupac, listaSK, 0);

        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Operacije.SACUVAJ_KUPOVINU);
        kz.setParametar(kupo);

        try {
            KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);
            ServerskiOdgovor so = KomunikacijaSaServerom.getInstanca().primiOdgovor();

            if (so.getIzuzetak() != null) {
                JOptionPane.showMessageDialog(this, "Sistem nije sacuvao kupovinu.");
            } else {
                JOptionPane.showMessageDialog(this, "Sistem je sacuvao kupovinu.");
                int izmenjenoStZaliha;

                for (StavkaKupovine sk : kupo.getListaStavki()) {
                    izmenjenoStZaliha = sk.getKnjiga().getStanjeNaZalihama() - sk.getKolicina();
                    sk.getKnjiga().setStanjeNaZalihama(izmenjenoStZaliha);

                    KlijentskiZahtev kz1 = new KlijentskiZahtev();
                    kz1.setOperacija(Operacije.IZMENI_KNJIGU);
                    kz1.setParametar(sk.getKnjiga());
                    try {
                        KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz1);
                        ServerskiOdgovor so1 = KomunikacijaSaServerom.getInstanca().primiOdgovor();

                        if (so.getIzuzetak() != null) {
                            JOptionPane.showMessageDialog(this, "Sistem nije azurirao stanje na zalihama.");

                        } else {
                            JOptionPane.showMessageDialog(this, "Sistem je azurirao stanje na zalihama.");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(NovaKupovina.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }

        } catch (IOException ex) {
            Logger.getLogger(NovaKupovina.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NovaKupovina.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnSacuvajKupovinuActionPerformed

    private void btnObradiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObradiActionPerformed
        if (kupovina != null) {
            if (kupovina.getObradjena() == 0) {

                kupovina.setObradjena(1);
                staviDaNeMozeDaSeMenja();
                btnObradi.setEnabled(false);
                System.out.println("dugme obradi disabled");

                KlijentskiZahtev kz = new KlijentskiZahtev();
                kz.setOperacija(Operacije.IZMENI_KUPOVINU);
                kz.setParametar(kupovina);

                try {
                    KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);
                    ServerskiOdgovor so = KomunikacijaSaServerom.getInstanca().primiOdgovor();

                    if (so.getIzuzetak() == null) {
                        JOptionPane.showMessageDialog(this, "Sistem je obradio kupovinu.");
                        dispose();
                    } else {
                        JOptionPane.showMessageDialog(this, "Sistem ne moze da obradi kupovinu.");
                        throw new Exception(so.getIzuzetak());
                    }

                } catch (IOException ex) {
                    Logger.getLogger(NoviKupac.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(NoviKupac.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Sistem nije obradio kupovinu!", "GREŠKA", JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_btnObradiActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        if (kupovina.getObradjena() == 1) {
            JOptionPane.showMessageDialog(this, "Kupovina je obradjena, nije moguća izmena!", "GRESKA", JOptionPane.ERROR_MESSAGE);

            staviDaNeMozeDaSeMenja();

            return;
        }
        Kupac kupac = (Kupac) cmbKupac.getSelectedItem();
        String dat = txtDatum.getText();
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        Date datum = null;
        try {
            datum = sdf.parse(dat);
        } catch (ParseException ex) {
            Logger.getLogger(NovaKupovina.class.getName()).log(Level.SEVERE, null, ex);
        }
        String napomena = txtAreaNapomemena.getText();
        ModelTabeleStavkaKupovine mtsk = (ModelTabeleStavkaKupovine) tabelaStavke.getModel();
        List<StavkaKupovine> listaSK = mtsk.getListaStavki();
        if (listaSK.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate uneti barem jednu stavku!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
            return;
        }
        double ukupno = 0;
        for (StavkaKupovine stavka : listaSK) {
            ukupno += stavka.getVrednostStavke();
        }

        txtUkupno.setText(String.valueOf(ukupno));
        if (kupac.getImePrezime().isEmpty() || dat.isEmpty() || napomena.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Unesite sve podatke");
            return;
        } else {
            Kupovina kupo1 = new Kupovina(kupovina.getKupovinaID(), datum, napomena, ukupno, kupac, listaSK, 0);
            KlijentskiZahtev kz = new KlijentskiZahtev();
            kz.setOperacija(Operacije.IZMENI_KUPOVINU);
            kz.setParametar(kupo1);

            try {
                KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);
                ServerskiOdgovor so = KomunikacijaSaServerom.getInstanca().primiOdgovor();

                if (so.getIzuzetak() == null) {
                    JOptionPane.showMessageDialog(this, "Sistem je izmenio kupovinu");
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da izmeni kupovinu.");
                    throw new Exception(so.getIzuzetak());
                }

            } catch (IOException ex) {
                Logger.getLogger(NoviKupac.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(NoviKupac.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnIzmeniStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniStavkuActionPerformed
        int red = tabelaStavke.getSelectedRow();
        if (red != -1) {
            ModelTabeleStavkaKupovine mtsk = (ModelTabeleStavkaKupovine) tabelaStavke.getModel();
            StavkaKupovine sk = mtsk.dajMiIzabranuStavku(red);
            UnosStavkeKupovine usk = new UnosStavkeKupovine(this, true);
            usk.setStavka(sk);
            usk.pack();
            usk.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(this, "Niste odabrali stavku iz tabele.");
        }

    }//GEN-LAST:event_btnIzmeniStavkuActionPerformed

    private void btnZatvoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZatvoriActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnZatvoriActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NovaKupovina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NovaKupovina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NovaKupovina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NovaKupovina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NovaKupovina().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajStavku;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnIzmeniStavku;
    private javax.swing.JButton btnObradi;
    private javax.swing.JButton btnObrisiStavku;
    private javax.swing.JButton btnSacuvajKupovinu;
    private javax.swing.JButton btnZatvori;
    private javax.swing.JComboBox cmbKupac;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabelaStavke;
    private javax.swing.JTextArea txtAreaNapomemena;
    private javax.swing.JTextField txtDatum;
    private javax.swing.JTextField txtUkupno;
    // End of variables declaration//GEN-END:variables

    private void popuniCBKupac() {
        try {
            KlijentskiZahtev kz = new KlijentskiZahtev();
            kz.setOperacija(Operacije.VRATI_KUPCE);

            KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

            ServerskiOdgovor so = KomunikacijaSaServerom.getInstanca().primiOdgovor();

            List<OpstiDomenskiObjekat> listaKupacaBaza = (List<OpstiDomenskiObjekat>) so.getOdgovor();

            cmbKupac.removeAllItems();
            for (OpstiDomenskiObjekat odo : listaKupacaBaza) {
                Kupac k = (Kupac) odo;
                cmbKupac.addItem(k);
            }

        } catch (IOException ex) {
            Logger.getLogger(NoviKupac.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NoviKupac.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void srediTabelu() {

        ModelTabeleStavkaKupovine mtsk = new ModelTabeleStavkaKupovine(kupovina);
        tabelaStavke.setModel(mtsk);
    }

    void dodajStavku(StavkaKupovine sk) {
        sk.setKupovina(kupovina);

        ModelTabeleStavkaKupovine mtsk = (ModelTabeleStavkaKupovine) tabelaStavke.getModel();
        mtsk.dodajStavku(sk);
    }

    private void staviDaNeMozeDaSeMenja() {
        btnSacuvajKupovinu.setEnabled(false);
        btnIzmeni.setEnabled(false);
        btnObrisiStavku.setVisible(false);
        btnDodajStavku.setVisible(false);
        btnIzmeniStavku.setVisible(false);
        tabelaStavke.setEnabled(false);
        txtDatum.setEditable(false);
        txtAreaNapomemena.setEditable(false);
        txtUkupno.setEditable(false);
        cmbKupac.setEnabled(false);

        System.out.println("Svi dugmici disabled");
    }

    public Kupovina getKupovina() {
        return kupovina;
    }

    public void setKupovina(Kupovina kupovina) {
        this.kupovina = kupovina;
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        Date dat = kupovina.getDatum();
        txtDatum.setText(sdf.format(dat));
        txtAreaNapomemena.setText(kupovina.getNapomena());
        txtUkupno.setText(String.valueOf(kupovina.getUkupno()));
        cmbKupac.setSelectedItem(kupovina.getKupac());

        //if(kupovina.getListaStavki().isEmpty()){
        // System.out.println("Lista prazna");
        // }
        ModelTabeleStavkaKupovine mtsk = (ModelTabeleStavkaKupovine) tabelaStavke.getModel();
        mtsk.postaviListuNaOvu(kupovina.getListaStavki());
        this.setTitle("Izmena kupovine");
        btnSacuvajKupovinu.setEnabled(false);
        btnIzmeni.setEnabled(true);
        if (kupovina.getObradjena() == 1) {
            staviDaNeMozeDaSeMenja();
            btnObradi.setEnabled(false);
            this.setTitle("Prikaz kupovine");
        }
    }

    void izmeniStavku(StavkaKupovine sk) {
        sk.setKupovina(kupovina);

        ModelTabeleStavkaKupovine mtsk = (ModelTabeleStavkaKupovine) tabelaStavke.getModel();
        mtsk.izmeniStavku(sk);
    }
}
