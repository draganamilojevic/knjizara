/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Knjiga;
import domen.OpstiDomenskiObjekat;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import komunikacija.KomunikacijaSaServerom;
import konstante.Operacije;
import model.ModelTabeleKnjiga;
import niti.OsvezavanjeNit;
import transfer.KlijentskiZahtev;
import transfer.ServerskiOdgovor;

/**
 *
 * @author gaga__m
 */
public class PretragaKnjiga extends javax.swing.JFrame {

    /**
     * Creates new form PretragaKnjiga
     */
    public PretragaKnjiga() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(255, 204, 102));
        OsvezavanjeNit okn = new OsvezavanjeNit(this);
        okn.start();
        //srediTabelu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkKriterijum = new javax.swing.JCheckBox();
        txtKriterijumPretrage = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaKnjige = new javax.swing.JTable();
        btnPrikaziDetalje = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        btnZatvori = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pretraga knjiga");

        checkKriterijum.setText("Krierijum pretrage");

        tabelaKnjige.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaKnjige);

        btnPrikaziDetalje.setText("Prikazi detalje / Izmeni");
        btnPrikaziDetalje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrikaziDetaljeActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        btnZatvori.setText("Zatvori");
        btnZatvori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZatvoriActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(checkKriterijum)
                        .addGap(18, 18, 18)
                        .addComponent(txtKriterijumPretrage))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(btnPrikaziDetalje, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnZatvori, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKriterijumPretrage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkKriterijum))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrikaziDetalje)
                    .addComponent(btnZatvori)
                    .addComponent(btnObrisi))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrikaziDetaljeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrikaziDetaljeActionPerformed

        int red = tabelaKnjige.getSelectedRow();
        if(red != -1){
            ModelTabeleKnjiga mtk = (ModelTabeleKnjiga) tabelaKnjige.getModel();
            Knjiga k = mtk.vratiMiIzabranuKnjigu(red);

            NovaKnjiga nova = new NovaKnjiga();
            nova.setKnjiga(k);
            nova.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(this, "Nije odabrana knjiga");
        }
    }//GEN-LAST:event_btnPrikaziDetaljeActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        int red = tabelaKnjige.getSelectedRow();
        if(red != -1){
            ModelTabeleKnjiga mtk = (ModelTabeleKnjiga) tabelaKnjige.getModel();
            Knjiga k = mtk.vratiMiIzabranuKnjigu(red);

            KlijentskiZahtev kz = new KlijentskiZahtev();
            kz.setOperacija(Operacije.OBRISI_KNJIGU);
            kz.setParametar(k);

            try {
                KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);
                ServerskiOdgovor so = KomunikacijaSaServerom.getInstanca().primiOdgovor();

                if (so.getIzuzetak() == null) {
                    JOptionPane.showMessageDialog(this, "Sistem je obrisao knjigu.");
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da obrise knjigu.");
                    throw new Exception(so.getIzuzetak());
                }
            } catch (IOException ex) {
                Logger.getLogger(PretragaKupaca.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PretragaKupaca.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(PretragaKupaca.class.getName()).log(Level.SEVERE, null, ex);
            }

        }else{
            JOptionPane.showMessageDialog(this, "Niste izabrali knjigu.");
        }

    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnZatvoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZatvoriActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnZatvoriActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PretragaKnjiga.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PretragaKnjiga.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PretragaKnjiga.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PretragaKnjiga.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PretragaKnjiga().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnPrikaziDetalje;
    private javax.swing.JButton btnZatvori;
    private javax.swing.JCheckBox checkKriterijum;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaKnjige;
    private javax.swing.JTextField txtKriterijumPretrage;
    // End of variables declaration//GEN-END:variables

    public void srediTabelu() {
        try {
            
            KlijentskiZahtev kz = new KlijentskiZahtev();
            kz.setOperacija(Operacije.VRATI_KNJIGE);

            KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);
            ServerskiOdgovor so = KomunikacijaSaServerom.getInstanca().primiOdgovor();

            List<OpstiDomenskiObjekat> listaKnjigaBaza = (List<OpstiDomenskiObjekat>) so.getOdgovor();

            List<Knjiga> listaFiltriranihKnjiga = new ArrayList<>();
            
            if (checkKriterijum.isSelected()) {
                String kriterijum = txtKriterijumPretrage.getText().trim();

                for (OpstiDomenskiObjekat o : listaKnjigaBaza) {
                    Knjiga k = (Knjiga) o;
                    if (String.valueOf(k.getKnjigaID()).contains(kriterijum) || k.getNazivKnjige().toLowerCase().contains(kriterijum.toLowerCase()) || k.getAutor().toLowerCase().contains(kriterijum.toLowerCase()) || String.valueOf(k.getCena()).contains(kriterijum)  || String.valueOf(k.getStanjeNaZalihama()).contains(kriterijum)) {
                        listaFiltriranihKnjiga.add(k);
                    }
                }
                if (listaFiltriranihKnjiga.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da nadje knjigu po zadatoj vrednosti.");
                   
                } else {
                    
                    JOptionPane.showMessageDialog(this, "Sistem je nasao knjige po zadatoj vrednosti.");
                    
                }
            }else{
                for (OpstiDomenskiObjekat o : listaKnjigaBaza) {
                    Knjiga k = (Knjiga) o;
                    listaFiltriranihKnjiga.add(k);
                }
            }
            
            ModelTabeleKnjiga mtk = new ModelTabeleKnjiga(listaFiltriranihKnjiga);
            tabelaKnjige.setModel(mtk);

        } catch (IOException ex) {
            Logger.getLogger(PretragaKupaca.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PretragaKupaca.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
